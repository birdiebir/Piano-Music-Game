function parseSrtTimesToMilliseconds(srtContent) {
    // Split the SRT content by line breaks
    const lines = srtContent.split('\n');
    const startTimesInMs = [];

    // Regular expression to match the time range in SRT format (e.g., 00:00:01,935 --> 00:00:04,904)
    const timeRegex = /(\d{2}):(\d{2}):(\d{2}),(\d{3}) --> (\d{2}):(\d{2}):(\d{2}),(\d{3})/;

    // Helper function to convert time to milliseconds
    function timeToMilliseconds(hours, minutes, seconds, milliseconds) {
        return (
            parseInt(hours) * 60 * 60 * 1000 +
            parseInt(minutes) * 60 * 1000 +
            parseInt(seconds) * 1000 +
            parseInt(milliseconds)
        );
    }

    // Iterate over each line
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();

        // If the line matches the time range format
        const match = line.match(timeRegex);
        if (match) {
            // Convert the start time to milliseconds
            const startTimeInMs = timeToMilliseconds(match[1], match[2], match[3], match[4]);
            startTimesInMs.push(startTimeInMs);
        }
    }

    return startTimesInMs;
}

// Example usage:
const srtContent = `
1
00:00:01,935 --> 00:00:04,904
 

2
00:00:04,904 --> 00:00:06,406
 

3
00:00:06,406 --> 00:00:07,774
 

4
00:00:07,774 --> 00:00:09,75
 

5
00:00:09,75 --> 00:00:10,410
 

6
00:00:10,410 --> 00:00:11,678
 

7
00:00:11,678 --> 00:00:13,13
 

8
00:00:13,13 --> 00:00:14,414
 

9
00:00:14,414 --> 00:00:15,248
 

10
00:00:15,782 --> 00:00:16,316
 

11
00:00:16,316 --> 00:00:18,385
 

12
00:00:18,385 --> 00:00:19,185
 

13
00:00:19,185 --> 00:00:21,87
 

14
00:00:21,87 --> 00:00:22,455
 

15
00:00:22,455 --> 00:00:22,856
 

16
00:00:22,856 --> 00:00:23,790
 

17
00:00:23,790 --> 00:00:25,125
 

18
00:00:25,125 --> 00:00:25,959
 

19
00:00:25,959 --> 00:00:27,761
 

20
00:00:27,761 --> 00:00:29,29
 

21
00:00:29,29 --> 00:00:30,363
 

22
00:00:30,363 --> 00:00:31,798
 

23
00:00:31,798 --> 00:00:32,999
 

24
00:00:32,999 --> 00:00:34,401
 

25
00:00:34,401 --> 00:00:35,669
 

26
00:00:35,669 --> 00:00:37,37
 

27
00:00:37,37 --> 00:00:38,371
 

28
00:00:38,371 --> 00:00:39,639
 

29
00:00:39,639 --> 00:00:40,974
 

30
00:00:40,974 --> 00:00:42,642
 

31
00:00:42,642 --> 00:00:43,677
 

32
00:00:43,677 --> 00:00:45,545
 

33
00:00:45,545 --> 00:00:47,781
 

34
00:00:47,781 --> 00:00:49,15
 

35
00:00:49,15 --> 00:00:50,216
 

36
00:00:50,216 --> 00:00:51,751
 

37
00:00:51,751 --> 00:00:53,19
 

38
00:00:53,19 --> 00:00:54,320
 

39
00:00:54,320 --> 00:00:55,822
 

40
00:00:55,822 --> 00:00:57,90
 

41
00:00:57,90 --> 00:00:58,458
 

42
00:00:58,458 --> 00:01:00,60
 

43
00:01:00,60 --> 00:01:01,94
 

44
00:01:01,94 --> 00:01:02,328
 

45
00:01:02,328 --> 00:01:03,997
 

46
00:01:03,997 --> 00:01:04,998
 

47
00:01:04,998 --> 00:01:05,365
 

48
00:01:05,365 --> 00:01:06,800
 

49
00:01:06,800 --> 00:01:08,335
 

50
00:01:08,335 --> 00:01:08,968
 

51
00:01:08,968 --> 00:01:10,337
 

52
00:01:10,337 --> 00:01:11,705
 

53
00:01:11,705 --> 00:01:12,672
 

54
00:01:12,672 --> 00:01:12,939
 

55
00:01:12,939 --> 00:01:14,207
 

56
00:01:14,207 --> 00:01:15,475
 

57
00:01:15,475 --> 00:01:17,410
 

58
00:01:17,410 --> 00:01:19,679
 

59
00:01:19,679 --> 00:01:20,914
 

60
00:01:20,914 --> 00:01:22,415
 

61
00:01:22,415 --> 00:01:24,84
 

62
00:01:24,84 --> 00:01:25,85
 

63
00:01:25,85 --> 00:01:26,353
 

64
00:01:26,353 --> 00:01:27,554
 

65
00:01:27,554 --> 00:01:28,154
 

66
00:01:28,154 --> 00:01:29,656
 

67
00:01:29,656 --> 00:01:30,523
 

68
00:01:30,523 --> 00:01:31,725
 

69
00:01:31,725 --> 00:01:32,959
 

70
00:01:32,959 --> 00:01:34,461
 

71
00:01:34,461 --> 00:01:35,695
 

72
00:01:35,695 --> 00:01:36,963
 

73
00:01:36,963 --> 00:01:38,798
 

74
00:01:38,798 --> 00:01:39,699
 

75
00:01:39,699 --> 00:01:40,867
 

76
00:01:40,867 --> 00:01:42,402
 

77
00:01:42,402 --> 00:01:43,670
 

78
00:01:43,670 --> 00:01:44,604
 

79
00:01:44,604 --> 00:01:44,938
 

80
00:01:44,938 --> 00:01:46,373
 

81
00:01:46,373 --> 00:01:47,707
 

82
00:01:47,707 --> 00:01:48,675
 

83
00:01:48,675 --> 00:01:48,975
 

84
00:01:49,409 --> 00:01:50,310
 

85
00:01:50,310 --> 00:01:57,117
 

86
00:01:57,117 --> 00:01:58,184
 

87
00:01:58,184 --> 00:01:59,652
 

88
00:01:59,652 --> 00:02:01,688
 

`;

const startTimes = parseSrtTimesToMilliseconds(srtContent);
console.log(startTimes); // Output: ["00:00:01,935", "00:00:04,904", "00:00:06,406"]

function customRoundToNearestTen(number) {
    return Math.round(number / 10) * 10;
}

startTimes.forEach(element => {
    console.log(customRoundToNearestTen(element));
});